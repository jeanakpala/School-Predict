import streamlit as st
import pandas as pd
import joblib
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import ast
import numpy as np
import os
import json
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_LEFT
from io import BytesIO

# Configurer la page
st.set_page_config(
    page_title="Pr√©diction du Risque d'Abandon", 
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personnalis√© pour am√©liorer l'apparence
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin: 0.5rem 0;
    }
    .risk-high { background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%); }
    .risk-medium { background: linear-gradient(135deg, #feca57 0%, #ff9ff3 100%); }
    .risk-low { background: linear-gradient(135deg, #48dbfb 0%, #0abde3 100%); }
    .sidebar .sidebar-content {
        background-color: #f8f9fa;
    }
</style>
""", unsafe_allow_html=True)

# Sidebar pour la navigation
st.sidebar.title(" Dashboard d'Analyse")
page = st.sidebar.selectbox(
    "Navigation",
    ["Pr√©diction Individuelle", "Analyse des R√®gles", "Statistiques Globales"]
)

# Charger les mod√®les et donn√©es
@st.cache_resource
def load_models():
    try:
        # Construire le chemin absolu vers les mod√®les
        current_dir = os.path.dirname(os.path.abspath(__file__))
        project_dir = os.path.dirname(current_dir)
        models_dir = os.path.join(project_dir, 'models')
        
        scaler = joblib.load(os.path.join(models_dir, 'scaler.joblib'))
        best_model_name = 'xgboost' 
        model = joblib.load(os.path.join(models_dir, f'{best_model_name}_model.joblib'))
        rules = pd.read_csv(os.path.join(models_dir, 'association_rules_at_risk.csv'))
        return scaler, model, rules
    except Exception as e:
        st.error(f"Erreur lors du chargement des mod√®les: {e}")
        return None, None, None

scaler, model, rules = load_models()

if scaler is None or model is None or rules is None:
    st.error("Impossible de charger les mod√®les. V√©rifiez que les fichiers existent dans le dossier models/")
    st.stop()

# Titre principal
st.markdown('<div class="main-header"><h1> Pr√©diction du Risque d\'Abandon Scolaire</h1></div>', unsafe_allow_html=True)

if page == "Pr√©diction Individuelle":
    st.header(" Simulation Individuelle")
    
    # Interface utilisateur am√©lior√©e
    col1, col2, col3 = st.columns([1, 1, 1])
    
    with col1:
        st.subheader(" Informations Personnelles")
        gender = st.selectbox("Genre", ["Masculin", "F√©minin"])
        highest_education = st.selectbox("Niveau d'√©ducation", [
            "Aucune qualification formelle", 
            "Inf√©rieur au niveau A", 
            "Niveau A ou √©quivalent", 
            "Qualification HE", 
            "Qualification post-universitaire"
        ])
        age_band = st.selectbox("Tranche d'√¢ge", ["0-35", "35-55", "55<="])
    
    with col2:
        st.subheader(" Indicateurs Acad√©miques")
        score = st.slider("Score moyen d'√©valuation", 0.0, 100.0, 50.0, help="Score moyen des √©valuations")
        total_clicks = st.slider("Clics totaux sur VLE", 0, 10000, 1000, help="Nombre total de clics sur la plateforme d'apprentissage")
        
        # Ajout d'un indicateur visuel pour les clics
        if total_clicks < 1000:
            st.warning("‚ö†Ô∏è Engagement VLE faible")
        elif total_clicks > 5000:
            st.success(" Engagement VLE √©lev√©")
        else:
            st.info("‚ÑπÔ∏è Engagement VLE moyen")
    
    with col3:
        st.subheader("üèò Contexte Socio-√©conomique")
        imd_band = st.slider("Indice de privation (IMD)", 0.0, 100.0, 50.0, help="Indice de privation multiple")
        
        # Indicateur visuel pour l'IMD
        if imd_band < 33:
            st.success(" Zone favoris√©e")
        elif imd_band > 66:
            st.error("‚ùå Zone d√©favoris√©e")
        else:
            st.info("‚ÑπÔ∏è Zone interm√©diaire")

    # Encoder les entr√©es
    gender_map = {"Masculin": 0, "F√©minin": 1}
    education_map = {
        "Aucune qualification formelle": 0,
        "Inf√©rieur au niveau A": 1,
        "Niveau A ou √©quivalent": 2,
        "Qualification HE": 3,
        "Qualification post-universitaire": 4
    }
    
    # Encodage one-hot pour age_band (selon l'ordre attendu par le mod√®le)
    age_band_55_plus = 1 if age_band == "55<=" else 0
    age_band_35_55 = 1 if age_band == "35-55" else 0
    # age_band_0_35 est implicite (0 si les autres sont 0)
    
    input_data = pd.DataFrame({
        'gender': [gender_map[gender]],
        'highest_education': [education_map[highest_education]],
        'imd_band': [imd_band],
        'age_band_55<=': [age_band_55_plus],
        'age_band_35-55': [age_band_35_55],
        'score': [score],
        'total_clicks': [total_clicks]
    })

    # Normaliser et pr√©dire
    input_scaled = scaler.transform(input_data)
    risk_proba = model.predict_proba(input_scaled)[0][1]

    # Afficher le r√©sultat avec des m√©triques visuelles
    st.markdown("---")
    st.header(" R√©sultat de la Pr√©diction")
    
    # D√©terminer le niveau de risque
    if risk_proba > 0.7:
        risk_level = "√âlev√©"
        risk_class = "risk-high"
    elif risk_proba > 0.4:
        risk_level = "Moyen"
        risk_class = "risk-medium"
    else:
        risk_level = "Faible"
        risk_class = "risk-low"
    
    # M√©triques en colonnes
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown(f'<div class="metric-card {risk_class}"><h3>Risque d\'Abandon</h3><h2>{risk_proba:.1%}</h2></div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown(f'<div class="metric-card"><h3>Niveau de Risque</h3><h2>{risk_level}</h2></div>', unsafe_allow_html=True)
    
    with col3:
        st.markdown(f'<div class="metric-card"><h3>Score Moyen</h3><h2>{score:.1f}/100</h2></div>', unsafe_allow_html=True)
    
    with col4:
        st.markdown(f'<div class="metric-card"><h3>Engagement VLE</h3><h2>{total_clicks:,}</h2></div>', unsafe_allow_html=True)

    # Graphique de jauge pour le risque
    fig = go.Figure(go.Indicator(
        mode = "gauge+number+delta",
        value = risk_proba * 100,
        domain = {'x': [0, 1], 'y': [0, 1]},
        title = {'text': "Risque d'Abandon (%)"},
        delta = {'reference': 50},
        gauge = {
            'axis': {'range': [None, 100]},
            'bar': {'color': "darkblue"},
            'steps': [
                {'range': [0, 40], 'color': "lightgreen"},
                {'range': [40, 70], 'color': "yellow"},
                {'range': [70, 100], 'color': "red"}
            ],
            'threshold': {
                'line': {'color': "red", 'width': 4},
                'thickness': 0.75,
                'value': 70
            }
        }
    ))
    fig.update_layout(height=300)
    st.plotly_chart(fig, use_container_width=True)

    # Discretiser pour les r√®gles
    score_cat = 'Score_Faible' if score < 33.33 else 'Score_Moyen' if score < 66.67 else 'Score_√âlev√©'
    clicks_cat = 'Clicks_Faible' if total_clicks < 3333 else 'Clicks_Moyen' if total_clicks < 6667 else 'Clicks_√âlev√©'
    imd_cat = 'IMD_Faible' if imd_band < 33.33 else 'IMD_Moyen' if imd_band < 66.67 else 'IMD_√âlev√©'

    # Filtrer les r√®gles pertinentes
    input_features = [
        f'gender_{gender}',
        f'highest_education_{highest_education.replace(" ", "_")}',
        f'imd_band_cat_{imd_cat}',
        f'age_band_55<={age_band_55_plus}',
        f'age_band_35-55_{age_band_35_55}',
        f'score_cat_{score_cat}',
        f'clicks_cat_{clicks_cat}'
    ]
    
    # Corriger l'erreur de linter en g√©rant correctement les colonnes
    try:
        relevant_rules = rules[rules['antecedents'].astype(str).apply(lambda x: any(f in x for f in input_features))]
    except:
        relevant_rules = pd.DataFrame()

    # Afficher les r√®gles pertinentes
    st.header(" R√®gles d'Association Pertinentes")
    if not relevant_rules.empty:
        # Traiter les colonnes de mani√®re s√©curis√©e
        def safe_process_rules(column):
            try:
                return column.astype(str).apply(lambda x: 
                    ', '.join(eval(x)) if x != 'nan' and x.strip() and x.startswith('{') else 'N/A'
                )
            except:
                return column.astype(str).apply(lambda x: 'N/A' if x == 'nan' else str(x))
        
        display_rules = relevant_rules.copy()
        display_rules['antecedents'] = safe_process_rules(display_rules['antecedents'])
        display_rules['consequents'] = safe_process_rules(display_rules['consequents'])
        
        # Formater les colonnes num√©riques
        display_rules['support'] = display_rules['support'].apply(lambda x: f"{x:.3f}")
        display_rules['confidence'] = display_rules['confidence'].apply(lambda x: f"{x:.3f}")
        display_rules['lift'] = display_rules['lift'].apply(lambda x: f"{x:.3f}")
        
        st.dataframe(
            display_rules[['antecedents', 'consequents', 'support', 'confidence', 'lift']],
            use_container_width=True
        )
    else:
        st.info("Aucune r√®gle d'association pertinente trouv√©e pour ces entr√©es.")

    # Recommandations am√©lior√©es
    st.header(" Recommandations Personnalis√©es")
    
    recommendations = []
    if risk_proba > 0.7:
        recommendations.append(" **Suivi personnalis√© intensif** : Planifier des entretiens hebdomadaires")
    elif risk_proba > 0.4:
        recommendations.append("‚ö† **Suivi r√©gulier** : Planifier des entretiens mensuels")
    
    if total_clicks < 1000:
        recommendations.append(" **Encourager l'engagement VLE** : Promouvoir l'utilisation de la plateforme")
    
    if score < 60:
        recommendations.append(" **Soutien acad√©mique** : Proposer des cours de soutien")
    
    if imd_band > 66:
        recommendations.append("üèò **Soutien socio-√©conomique** : Orienter vers les services sociaux")
    
    if not recommendations:
        recommendations.append(" **Continuer le suivi actuel** : L'√©tudiant semble bien engag√©")
    
    for rec in recommendations:
        st.write(rec)

    # T√©l√©chargement du rapport
    st.markdown("---")
    col1, col2 = st.columns([1, 1])
    
    with col1:
        if st.button(" G√©n√©rer le rapport CSV", type="primary"):
            report = input_data.copy()
            report['risk_probability'] = risk_proba
            report['risk_level'] = risk_level
            csv = report.to_csv(index=False)
            st.download_button(
                label=" T√©l√©charger le rapport CSV",
                data=csv,
                file_name="student_risk_report.csv",
                mime="text/csv"
            )
    
    with col2:
        if st.button(" Afficher le rapport d√©taill√©"):
            # Cr√©er un rapport plus d√©taill√©
            detailed_report = {
                'Informations_√©tudiant': {
                    'Genre': gender,
                    'Niveau_√©ducation': highest_education,
                    'Tranche_√¢ge': age_band,
                    'Score_moyen': score,
                    'Clics_VLE': total_clicks,
                    'Indice_privation': imd_band
                },
                'Pr√©diction': {
                    'Risque_abandon': f"{risk_proba:.1%}",
                    'Niveau_risque': risk_level,
                    'Probabilit√©_numerique': float(risk_proba)
                },
                'Analyse_des_facteurs': {
                    'Score_cat√©gorie': score_cat,
                    'Clics_cat√©gorie': clicks_cat,
                    'IMD_cat√©gorie': imd_cat,
                    'Engagement_VLE': 'Faible' if total_clicks < 1000 else 'Moyen' if total_clicks < 5000 else '√âlev√©',
                    'Zone_socio_√©conomique': 'Favoris√©e' if imd_band < 33 else 'Interm√©diaire' if imd_band < 66 else 'D√©favoris√©e'
                },
                'Recommandations': recommendations,
                'R√®gles_association_pertinentes': len(relevant_rules),
                'Date_analyse': pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S'),
                'Version_mod√®le': 'XGBoost v3.0.2'
            }
            
            # Afficher le rapport dans l'interface
            st.subheader(" Rapport D√©taill√©")
            st.json(detailed_report)
            
            # Bouton pour t√©l√©charger le PDF apr√®s affichage
            if st.button(" T√©l√©charger le rapport PDF", key="download_pdf"):
                # Fonction pour g√©n√©rer le PDF
                def generate_pdf_report():
                    pdf_buffer = BytesIO()
                    doc = SimpleDocTemplate(pdf_buffer, pagesize=A4)
                    styles = getSampleStyleSheet()
                    
                    # Styles personnalis√©s
                    title_style = ParagraphStyle(
                        'CustomTitle',
                        parent=styles['Title'],
                        fontSize=16,
                        spaceAfter=30,
                        alignment=TA_CENTER,
                        textColor=colors.darkblue
                    )
                    
                    heading_style = ParagraphStyle(
                        'CustomHeading',
                        parent=styles['Heading2'],
                        fontSize=14,
                        spaceAfter=12,
                        textColor=colors.darkblue
                    )
                    
                    # Contenu du PDF
                    story = []
                    
                    # Titre principal
                    story.append(Paragraph("RAPPORT D'ANALYSE DU RISQUE D'ABANDON SCOLAIRE", title_style))
                    story.append(Spacer(1, 20))
                    
                    # Informations √©tudiant
                    story.append(Paragraph("INFORMATIONS √âTUDIANT", heading_style))
                    story.append(Spacer(1, 12))
                    
                    student_data = [
                        ['Champ', 'Valeur'],
                        ['Genre', gender],
                        ['Niveau d\'√©ducation', highest_education],
                        ['Tranche d\'√¢ge', age_band],
                        ['Score moyen', f"{score:.1f}/100"],
                        ['Clics VLE', f"{total_clicks:,}"],
                        ['Indice de privation (IMD)', f"{imd_band:.1f}"]
                    ]
                    
                    student_table = Table(student_data, colWidths=[2*inch, 3*inch])
                    student_table.setStyle(TableStyle([
                        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                        ('FONTSIZE', (0, 0), (-1, 0), 12),
                        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                        ('GRID', (0, 0), (-1, -1), 1, colors.black)
                    ]))
                    story.append(student_table)
                    story.append(Spacer(1, 20))
                    
                    # Pr√©diction
                    story.append(Paragraph("PR√âDICTION", heading_style))
                    story.append(Spacer(1, 12))
                    
                    prediction_data = [
                        ['M√©trique', 'Valeur'],
                        ['Risque d\'abandon', f"{risk_proba:.1%}"],
                        ['Niveau de risque', risk_level]
                    ]
                    
                    prediction_table = Table(prediction_data, colWidths=[2*inch, 3*inch])
                    prediction_table.setStyle(TableStyle([
                        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                        ('FONTSIZE', (0, 0), (-1, 0), 12),
                        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                        ('GRID', (0, 0), (-1, -1), 1, colors.black)
                    ]))
                    story.append(prediction_table)
                    story.append(Spacer(1, 20))
                    
                    # Analyse des facteurs
                    story.append(Paragraph("ANALYSE DES FACTEURS", heading_style))
                    story.append(Spacer(1, 12))
                    
                    factors_data = [
                        ['Facteur', 'Cat√©gorie'],
                        ['Score', score_cat],
                        ['Clics VLE', clicks_cat],
                        ['IMD', imd_cat],
                        ['Engagement VLE', 'Faible' if total_clicks < 1000 else 'Moyen' if total_clicks < 5000 else '√âlev√©'],
                        ['Zone socio-√©conomique', 'Favoris√©e' if imd_band < 33 else 'Interm√©diaire' if imd_band < 66 else 'D√©favoris√©e']
                    ]
                    
                    factors_table = Table(factors_data, colWidths=[2*inch, 3*inch])
                    factors_table.setStyle(TableStyle([
                        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                        ('FONTSIZE', (0, 0), (-1, 0), 12),
                        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                        ('GRID', (0, 0), (-1, -1), 1, colors.black)
                    ]))
                    story.append(factors_table)
                    story.append(Spacer(1, 20))
                    
                    # Recommandations
                    story.append(Paragraph("RECOMMANDATIONS", heading_style))
                    story.append(Spacer(1, 12))
                    
                    for i, rec in enumerate(recommendations, 1):
                        story.append(Paragraph(f"{i}. {rec}", styles['Normal']))
                        story.append(Spacer(1, 6))
                    
                    story.append(Spacer(1, 20))
                    
                    # M√©tadonn√©es
                    story.append(Paragraph("M√âTADONN√âES", heading_style))
                    story.append(Spacer(1, 12))
                    
                    metadata_data = [
                        ['Information', 'Valeur'],
                        ['Date d\'analyse', pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')],
                        ['Mod√®le utilis√©', 'XGBoost v3.0.2'],
                        ['R√®gles d\'association trouv√©es', str(len(relevant_rules))]
                    ]
                    
                    metadata_table = Table(metadata_data, colWidths=[2*inch, 3*inch])
                    metadata_table.setStyle(TableStyle([
                        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                        ('FONTSIZE', (0, 0), (-1, 0), 12),
                        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                        ('GRID', (0, 0), (-1, -1), 1, colors.black)
                    ]))
                    story.append(metadata_table)
                    
                    # G√©n√©rer le PDF
                    doc.build(story)
                    pdf_buffer.seek(0)
                    return pdf_buffer.getvalue()
                
                # G√©n√©rer et t√©l√©charger le PDF
                pdf_content = generate_pdf_report()
                st.download_button(
                    label="üì• T√©l√©charger le rapport PDF",
                    data=pdf_content,
                    file_name=f"rapport_etudiant_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.pdf",
                    mime="application/pdf"
                )

elif page == "Analyse des R√®gles":
    st.header(" Analyse des R√®gles d'Association")
    
    # Statistiques des r√®gles
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Nombre total de r√®gles", len(rules))
    
    with col2:
        avg_confidence = rules['confidence'].mean()
        st.metric("Confiance moyenne", f"{avg_confidence:.3f}")
    
    with col3:
        avg_lift = rules['lift'].mean()
        st.metric("Lift moyen", f"{avg_lift:.3f}")
    
    # Filtres pour les r√®gles
    st.subheader("Filtres")
    col1, col2 = st.columns(2)
    
    with col1:
        min_confidence = st.slider("Confiance minimale", 0.0, 1.0, 0.5)
        min_support = st.slider("Support minimal", 0.0, 1.0, 0.01)
    
    with col2:
        min_lift = st.slider("Lift minimal", 0.0, 10.0, 1.0)
        max_rules = st.number_input("Nombre max de r√®gles √† afficher", 10, 100, 50)
    
    # Filtrer les r√®gles
    filtered_rules = rules[
        (rules['confidence'] >= min_confidence) &
        (rules['support'] >= min_support) &
        (rules['lift'] >= min_lift)
    ].head(max_rules)
    
    if not filtered_rules.empty:
        # Graphique de dispersion confidence vs lift
        fig = px.scatter(
            filtered_rules, 
            x='confidence', 
            y='lift', 
            size='support',
            hover_data=['antecedents', 'consequents'],
            title="Confiance vs Lift des R√®gles d'Association"
        )
        st.plotly_chart(fig, use_container_width=True)
        
        # Afficher les r√®gles filtr√©es
        st.subheader(f"R√®gles filtr√©es ({len(filtered_rules)} r√®gles)")
        display_rules = filtered_rules.copy()
        
        # Fonction am√©lior√©e pour traiter les r√®gles
        def safe_process_rules_improved(column):
            try:
                return column.astype(str).apply(lambda x: 
                    ', '.join(eval(x)) if x != 'nan' and x.strip() and x.startswith('{') else 'N/A'
                )
            except:
                return column.astype(str).apply(lambda x: 'N/A' if x == 'nan' else str(x))
        
        display_rules['antecedents'] = safe_process_rules_improved(display_rules['antecedents'])
        display_rules['consequents'] = safe_process_rules_improved(display_rules['consequents'])
        
        # Formater les colonnes num√©riques
        display_rules['support'] = display_rules['support'].apply(lambda x: f"{x:.3f}")
        display_rules['confidence'] = display_rules['confidence'].apply(lambda x: f"{x:.3f}")
        display_rules['lift'] = display_rules['lift'].apply(lambda x: f"{x:.3f}")
        
        st.dataframe(
            display_rules[['antecedents', 'consequents', 'support', 'confidence', 'lift']],
            use_container_width=True
        )
    else:
        st.warning("Aucune r√®gle ne correspond aux crit√®res de filtrage.")

elif page == "Statistiques Globales":
    st.header(" Statistiques Globales")
    
    # Cr√©er des donn√©es simul√©es pour les statistiques
    np.random.seed(42)
    n_students = 1000
    
    # Simuler des donn√©es d'√©tudiants
    simulated_data = pd.DataFrame({
        'gender': np.random.choice(['Masculin', 'F√©minin'], n_students),
        'age_band': np.random.choice(['0-35', '35-55', '55<='], n_students),
        'score': np.random.normal(65, 15, n_students).clip(0, 100),
        'total_clicks': np.random.poisson(2000, n_students),
        'imd_band': np.random.uniform(0, 100, n_students),
        'risk_proba': np.random.beta(2, 5, n_students)
    })
    
    # M√©triques globales
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Nombre d'√©tudiants", n_students)
    
    with col2:
        avg_score = simulated_data['score'].mean()
        st.metric("Score moyen", f"{avg_score:.1f}")
    
    with col3:
        avg_clicks = simulated_data['total_clicks'].mean()
        st.metric("Clics moyens VLE", f"{avg_clicks:.0f}")
    
    with col4:
        high_risk = (simulated_data['risk_proba'] > 0.7).sum()
        st.metric("√âtudiants √† haut risque", f"{high_risk} ({high_risk/n_students:.1%})")
    
    # Graphiques
    col1, col2 = st.columns(2)
    
    with col1:
        # Distribution des scores
        fig = px.histogram(
            simulated_data, 
            x='score', 
            nbins=20,
            title="Distribution des Scores",
            labels={'score': 'Score', 'count': 'Nombre d\'√©tudiants'}
        )
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Distribution des risques
        fig = px.histogram(
            simulated_data, 
            x='risk_proba', 
            nbins=20,
            title="Distribution des Risques d'Abandon",
            labels={'risk_proba': 'Probabilit√© de risque', 'count': 'Nombre d\'√©tudiants'}
        )
        st.plotly_chart(fig, use_container_width=True)
    
    # Graphique de corr√©lation
    fig = px.scatter(
        simulated_data,
        x='score',
        y='total_clicks',
        color='risk_proba',
        title="Corr√©lation Score vs Clics VLE",
        labels={'score': 'Score', 'total_clicks': 'Clics VLE', 'risk_proba': 'Risque'}
    )
    st.plotly_chart(fig, use_container_width=True)
    
    # Tableau de statistiques par genre
    st.subheader("Statistiques par Genre")
    gender_stats = simulated_data.groupby('gender').agg({
        'score': ['mean', 'std'],
        'total_clicks': ['mean', 'std'],
        'risk_proba': ['mean', 'std']
    }).round(2)
    
    st.dataframe(gender_stats, use_container_width=True)

# Footer
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center; color: #666; padding: 1rem;'>
        <p> Dashboard de Pr√©diction du Risque d'Abandon Scolaire √† partir du dataset OULAD</p>
    </div>
    """,
    unsafe_allow_html=True
)